LLM: ChatGPT-4.
Date: 24 November 2024

Simulate data:
User
Can you simulate data by use the headings.marital_status: Married or Not_Married.
age: Age of individuals (minimum 18).
gender: Male or Female.
Race: White, Black, Asian, American Indian, Other.
Income: Simulated income (minimum 15,000).
education_level: Below_High_School, High_School, Some_College, Bachelor, Above_Bachelor.

ChatGPT:
Here's the updated R script where race and all other variables are generated purely randomly (without any probabilities):

R Script (Pure Random Generation)
R
Copy code
# Set the seed for reproducibility
set.seed(42)

# Number of observations
n <- 1000

# Simulate marital status (categorical variable, randomly generated)
marital_status <- sample(c("Married", "Not_Married"), size = n, replace = TRUE)

# Simulate age (randomly generated within a realistic range)
age <- sample(18:90, size = n, replace = TRUE)

# Simulate gender (randomly generated)
gender <- sample(c("Male", "Female"), size = n, replace = TRUE)

# Simulate race (randomly generated with no probabilities)
race <- sample(c("White", "Black", "Asian", "American Indian", "Other"), size = n, replace = TRUE)

# Simulate income (randomly generated within a realistic range)
income <- sample(15000:150000, size = n, replace = TRUE)

# Simulate education level (randomly generated from all categories)
education_level <- sample(c("Below_High_School", "High_School", "Some_College", "Bachelor", "Above_Bachelor"), 
                          size = n, replace = TRUE)

# Combine into a data frame
simulated_data <- data.frame(
  marital_status = marital_status,
  age = age,
  gender = gender,
  Race = race,
  Income = income,
  education_level = education_level
)

# Display the structure of the simulated dataset
str(simulated_data)

# Save the simulated data to a CSV file
write.csv(simulated_data, "simulated_data_pure_random.csv", row.names = FALSE)

# Print a success message
cat("Simulation complete. Dataset saved as 'simulated_data_pure_random.csv'.\n")

Data cleaning
User
help me with data cleaning based on the codebook

ChatGPT

Here is the combined and optimized R script based on your requirements:

Combined and Optimized Script
R
Copy code
# Load necessary libraries
library(dplyr)
library(here)
library(arrow)
library(fs)

# Step 1: Read the CSV file (adjust the path as necessary)
data <- read.csv(here("data", "marriage_demo.csv"))

# Step 2: Clean and process the data
cleaned_data <- data %>%
  # Select relevant columns
  select(MARST, SEX, AGE, RACE, EDUC, EMPSTAT, INCTOT) %>%
  
  # Remove invalid values based on codebook
  filter(
    MARST != 9,                # Remove missing marital status
    SEX %in% c(1, 2),          # Keep only valid genders (1 = Male, 2 = Female)
    AGE < 999,                 # Remove invalid ages
    RACE < 99,                 # Remove invalid race values
    EDUC %in% 0:11,            # Keep only valid education levels
    EMPSTAT < 9,               # Remove invalid employment status
    INCTOT < 9999999           # Remove invalid income
  ) %>%
  
  # Recode MARST into married and not married
  mutate(
    marital_status = if_else(MARST == 6, "Not_Married", "Married")
  ) %>%
  
  # Recode EDUC into education levels
  filter(!EDUC %in% c(0, 99)) %>%  # Remove invalid education values
  mutate(
    education_level = case_when(
      EDUC %in% c(0, 1, 2, 3, 4, 5) ~ "Below_High_School",  
      EDUC == 6 ~ "High_School",  
      EDUC %in% c(7, 8) ~ "Some_College",  
      EDUC == 10 ~ "Bachelor",  
      EDUC == 11 ~ "Above_Bachelor"  
    )
  ) %>%
  
  # Recode RACE into broader categories
  mutate(
    race_group = case_when(
      RACE == 1 ~ "White",
      RACE == 2 ~ "Black",
      RACE %in% c(3, 7, 8, 9) ~ "Other",
      RACE %in% c(4, 5, 6) ~ "Asian"
    )
  ) %>%
  
  # Recode SEX into Male and Female
  mutate(
    gender = case_when(
      SEX == 1 ~ "Male",
      SEX == 2 ~ "Female"
    )
  )

# Step 3: Randomly sample 5,000 rows
set.seed(304)  # Ensure reproducibility
analysis_data <- cleaned_data %>%
  slice_sample(n = 5000) %>%  # Randomly sample 5,000 rows
  rename(
    Income = INCTOT,          # Rename INCTOT to Income
    Race = race_group         # Rename race_group to Race
  ) %>%
  select(marital_status, AGE, gender, Race, Income, education_level) %>%  # Select only the specified columns
  rename(age = AGE)  # Rename AGE to age for consistency

# Step 4: Save the cleaned and sampled data
output_folder <- here("data", "01-analysis_data")
output_path <- file.path(output_folder, "analysis_data.parquet")

# Ensure the directory exists
if (!dir_exists(output_folder)) {
  dir_create(output_folder)  # Create the directory if it does not exist
}

write_parquet(analysis_data, output_path)  # Save as Parquet file

# Step 5: Display the first few rows of the processed data
head(analysis_data)

Test Data
User
test simulated data. I want to test on each variable. if gender is character, age is with in the range, income is not empty, and so on. The suite should be extensive and put together in a sophisticated way using packages like testthat, validate, pointblank, or great expectations.

ChatGPT

# Load necessary libraries
library(testthat)
library(validate)
library(readr)
library(here)

# Load the simulated dataset
simulated_data <- read_csv(here("data", "00-simulated_data", "simulated_data.csv"))

# Test Suite for Simulated Dataset using testthat
test_that("Simulated Dataset Variable-Level Tests", {
  
  # 1. Check if gender is a character
  expect_true(is.character(simulated_data$gender))
  
  # 2. Check if marital_status is a character and contains only expected values
  expect_true(is.character(simulated_data$marital_status))
  expect_true(all(simulated_data$marital_status %in% c("Married", "Not_Married")))
  
  # 3. Check if age is numeric and within the valid range
  expect_true(is.numeric(simulated_data$age))
  expect_true(all(simulated_data$age >= 18 & simulated_data$age <= 110))
  
  # 4. Check if Race is a character and contains only expected categories
  expect_true(is.character(simulated_data$Race))
  expect_true(all(simulated_data$Race %in% c("White", "Black", "Asian", "American Indian", "Other")))
  
  # 5. Check if Income is numeric and not empty (removed range test as per request)
  expect_true(is.numeric(simulated_data$Income))
  expect_true(!any(is.na(simulated_data$Income)))
  
  # 6. Check if education_level is a character and contains only expected categories
  expect_true(is.character(simulated_data$education_level))
  expect_true(all(simulated_data$education_level %in% c(
    "Below_High_School", "High_School", "Some_College", "Bachelor", "Above_Bachelor"
  )))
  
  # 7. Check if there are no duplicate rows in the dataset
  expect_true(nrow(simulated_data) == nrow(unique(simulated_data)))
  
  # 8. Check for missing values in all columns
  expect_true(all(complete.cases(simulated_data)))
})

# Additional Tests with validate
rules <- validator(
  # 9. Check that marital_status contains only "Married" or "Not_Married"
  marital_status_is_valid = all(simulated_data$marital_status %in% c("Married", "Not_Married")),
  
  # 10. Ensure age is numeric and falls between 18 and 110
  age_is_valid = all(simulated_data$age >= 18 & simulated_data$age <= 110),
  
  # 11. Ensure there are no missing values in the dataset
  no_missing_values = all(complete.cases(simulated_data)),
  
  # 12. Ensure education_level has only expected values
  education_is_valid = all(simulated_data$education_level %in% c(
    "Below_High_School", "High_School", "Some_College", "Bachelor", "Above_Bachelor"
  ))
)

# Apply the validation rules to the dataset
validation_results <- confront(simulated_data, rules)

# Print validation summary
cat("\nValidation Results:\n")
print(summary(validation_results))

# Visualize validation results (optional)
plot(validation_results)
